package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_user_event_table_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4d\xce\xd0\x2b\x2d\x4e\x2d\x8a\x4f\x2d\x4b\xcd\x2b\xb1\xc6\xaf\x08\x8f\x34\x21\xed\x25\x89\xe9\x50\xd9\x60\x67\x0f\x57\x5f\x47\x54\x69\x6b\x2e\x2e\x67\x7f\x5f\x5f\xcf\x10\x6b\x40\x00\x00\x00\xff\xff\x89\xde\xfe\xa3\xad\x00\x00\x00")

func _000001_user_event_table_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_user_event_table_down_sql,
		"000001_user_event_table.down.sql",
	)
}

var __000001_user_event_table_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4f\x6f\x9b\x30\x14\xbf\xf3\x29\x9e\x7a\x4a\xa4\x6e\xa7\xdd\x7a\xa2\x89\xbb\xa1\x25\x30\x05\x4f\x6a\x35\x4d\xc8\xe0\x57\xf0\x06\x36\xb3\x4d\xbb\x7c\xfb\x09\x8c\x88\x57\xac\x1c\xea\xe3\xef\xdf\x33\x3f\x9e\xef\xc9\xe7\x24\xbd\x8b\xa2\xdd\x89\xc4\x94\x40\xbe\xfb\x42\x8e\x31\x24\x0f\x90\x66\x14\xc8\x63\x92\xd3\x1c\xba\xaa\x59\x14\x11\x79\xa4\x24\xcd\x93\x2c\x7d\x23\xba\x19\x06\xc1\x3f\x28\x63\xfa\x9b\x4b\x1c\x8d\xef\x0f\x64\xf4\x7f\x1c\x0c\xea\x68\x13\x01\x00\x08\x0e\xcb\x19\x4d\xd0\x6b\xd1\x31\x7d\x86\xdf\x78\x86\x3d\x79\x88\xbf\x1f\xe8\x44\x14\x35\x4a\xd4\xcc\x62\xf1\xf2\x69\xb3\xbd\x9d\xcc\xcf\x42\x1b\x5b\x48\xd6\x21\x80\xc5\xbf\xd6\xa1\x2d\x5b\x40\x0f\xed\x04\xe7\x2d\x3a\xfc\x82\x62\xc7\x44\x3b\x8f\x1f\x51\x90\xca\x82\x1c\xda\x16\x06\x29\xfe\x0c\xe8\x54\x7d\xa3\xac\xf2\x54\x0e\x65\xa5\x1a\xec\x0a\xed\x1b\x25\x71\x8d\x32\x63\x5e\x95\xe6\xab\x39\x8e\xb6\xac\x36\xe0\x99\x7e\xfc\x8c\xb6\xa1\xe2\xf0\x05\xa5\x0d\x34\xf7\xce\xfe\xe6\x92\xbc\x13\xb8\x9b\xe8\x58\x8d\x2b\x91\xe3\x2a\x66\xb1\x56\xfa\x7c\x35\x80\x33\xfb\x66\x4a\x29\x6a\x21\xe7\x08\xd3\x28\x6d\x0b\x8e\xa6\xd2\xa2\xb7\x42\x49\x2f\xde\x47\x57\xed\x73\xae\xd1\x18\x2f\xf5\x97\x51\xb2\x74\xe4\x2b\x96\x46\xfc\x37\x35\xfc\xcb\x2f\x5c\xb8\xef\x71\x51\x0b\xbf\xf4\x09\x18\x9b\x9f\xba\xd6\xf8\x8c\x1a\x65\x85\x66\x51\xc3\x46\xf0\x2d\x64\x29\xec\xc9\x81\x50\x02\xbb\x38\xdf\xc5\x7b\x32\x8f\x1e\x93\x46\x7b\xc8\x3d\x91\x57\xed\xdf\x4e\xc9\x31\x3e\x3d\xc1\x57\xf2\x04\x9b\xf9\x26\xb7\x4b\xe8\x36\xfc\x09\x96\xd5\xfe\xc2\xb8\xea\xfd\x2d\xf1\x56\x21\xf4\x02\x5c\x6a\x76\x3c\x26\xf4\xee\x5f\x00\x00\x00\xff\xff\x57\x9f\xdb\x1e\x20\x04\x00\x00")

func _000001_user_event_table_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_user_event_table_up_sql,
		"000001_user_event_table.up.sql",
	)
}

var __000002_user_project_table_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4d\xce\xd0\x2b\x28\xca\xcf\x4a\x4d\x2e\xb1\xc6\xad\xa2\xb4\x38\xb5\x28\x1e\xae\x8c\xcb\xd9\xdf\xd7\xd7\x33\xc4\x1a\x10\x00\x00\xff\xff\xed\xc0\xe6\x01\x59\x00\x00\x00")

func _000002_user_project_table_down_sql() ([]byte, error) {
	return bindata_read(
		__000002_user_project_table_down_sql,
		"000002_user_project_table.down.sql",
	)
}

var __000002_user_project_table_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x4d\x4f\xf2\x40\x14\x85\xf7\xfd\x15\x77\xd9\x26\xe4\x5d\xbd\x3b\x56\x05\x46\x43\xe4\xc3\x60\x5d\x10\x63\x26\x43\xe7\x52\x46\xdb\x99\xe6\xce\x0c\xc8\xbf\x37\xed\x54\x91\x86\x60\x62\x5c\xd8\x5d\x73\x4f\x4f\xce\xf3\x74\xc4\x6e\xa7\x8b\x61\x14\x8d\x57\x2c\xcd\x18\x64\xe9\x68\xc6\xa0\xca\x77\xff\x6a\x32\x2f\x98\xbb\x28\x8e\x00\x00\x94\x84\xb3\xc7\x7b\x25\xa1\x26\x55\x09\x3a\xc2\x2b\x1e\x61\xc2\x6e\xd2\xc7\x59\xd6\x1e\x78\x81\x1a\x49\x38\xe4\xfb\xff\x71\x32\x68\x0b\xb4\xa8\xf0\x6b\x81\xc3\x37\x07\xda\x38\xd0\xbe\x2c\x43\x44\x55\xa2\xc0\x5e\xa4\xbb\x68\xe9\xad\xa3\xe3\x95\x8f\xcd\x41\x23\xf1\xd3\xcc\x76\x20\xe1\x16\x09\x75\x8e\xb6\x45\xf2\x16\x09\x62\x25\x13\x58\x2e\x60\xc2\x66\x2c\x63\x30\x4e\x1f\xc6\xe9\x84\x85\x12\x89\x36\x27\x55\x3b\x65\x74\x6f\x01\xa1\x90\x4a\xa3\xb5\xdc\xba\x66\xe5\x85\x05\x4e\x14\xb6\x4f\xf8\xf4\x1c\x6e\xa5\xf0\x3a\xdf\x71\x29\x5c\x00\xdc\xa8\x42\x69\x17\x25\x97\xc4\x37\x2b\xf9\xb9\xfd\xee\xad\xc1\xbb\xc4\xd5\x9d\xaf\xa2\xb5\xad\x41\xcf\x8f\xd4\xec\x15\x1e\x30\xd8\xdd\x18\x53\xa2\xd0\x9f\xbf\xdc\x91\xc7\x10\x12\x75\x5d\xaa\x90\xea\x87\xb6\xa2\xb4\x5d\x2a\x37\x7a\xab\xa8\x6a\x72\x57\x52\xf7\xab\xe9\x3c\x5d\xad\xe1\x8e\xad\x21\x3e\x09\x18\x7c\x90\x24\xdf\xdb\xe3\x61\xf4\xdf\x91\xf8\xab\xe4\xcb\xf9\x7c\x9a\x0d\xdf\x03\x00\x00\xff\xff\xbc\x35\xa0\xb3\xc0\x03\x00\x00")

func _000002_user_project_table_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_user_project_table_up_sql,
		"000002_user_project_table.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_user_event_table.down.sql": _000001_user_event_table_down_sql,
	"000001_user_event_table.up.sql": _000001_user_event_table_up_sql,
	"000002_user_project_table.down.sql": _000002_user_project_table_down_sql,
	"000002_user_project_table.up.sql": _000002_user_project_table_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_user_event_table.down.sql": &_bintree_t{_000001_user_event_table_down_sql, map[string]*_bintree_t{
	}},
	"000001_user_event_table.up.sql": &_bintree_t{_000001_user_event_table_up_sql, map[string]*_bintree_t{
	}},
	"000002_user_project_table.down.sql": &_bintree_t{_000002_user_project_table_down_sql, map[string]*_bintree_t{
	}},
	"000002_user_project_table.up.sql": &_bintree_t{_000002_user_project_table_up_sql, map[string]*_bintree_t{
	}},
}}
